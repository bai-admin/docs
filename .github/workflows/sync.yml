# .github/workflows/sync.yml
#
# Synchronises external repositories into this repo according to
# `.github/sync-config.yaml`.
#
# – Config format: YAML (not JSON)
# – Sparse-checkout: **always non-cone**
# – One execution path: clone → (optional) sparse patterns → (optional) scripts
#   → (optional) truncDir → rsync → patch
#
# Requires a companion file `.github/sync-config.yaml` (see earlier message).

name: Sync

on:
  schedule:
    - cron: '0 * * * *'        # hourly
  workflow_dispatch:            # manual trigger

defaults:
  run:
    shell: bash

concurrency:
  group: auto-sync
  cancel-in-progress: true

##############################################################################
# 1. Convert the YAML config to a GitHub Actions matrix
##############################################################################
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4   # checkout *this* repo so we can read the config

      - name: Install helpers (jq + PyYAML)
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq python3-yaml

      - name: Build matrix JSON
        id: set-matrix
        run: |
          MATRIX=$(python3 - <<'PY'
          import json, yaml, sys, pathlib
          cfg_path = pathlib.Path(".github/sync-config.yaml")
          data = yaml.safe_load(cfg_path.read_text())
          print(json.dumps({"include": data}))
          PY
          )
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

##############################################################################
# 2. One parallel “sync” job per entry
##############################################################################
  sync:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false

    env:
      GH_HOST: github.com   # change if you mirror to another host

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0    # full history needed for patch generation

      - name: Install jq
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq

      - name: Perform sync
        env:
          ENTRY_JSON: ${{ toJson(matrix) }}   # pass matrix row as JSON
        run: |
          set -euo pipefail

          #-------------------------------------------------------------------
          # 0. Parse entry fields
          #-------------------------------------------------------------------
          repo=$(echo "$ENTRY_JSON" | jq -r '.repo')
          branch=$(echo "$ENTRY_JSON" | jq -r '.branch // empty')
          destDir=$(echo "$ENTRY_JSON" | jq -r '.destDir')
          truncDir=$(echo "$ENTRY_JSON" | jq -r '.truncDir // empty')

          # Arrays → Bash arrays
          mapfile -t checkoutArr < <(echo "$ENTRY_JSON" | jq -r '.checkout // [] | .[]')
          mapfile -t scriptsArr  < <(echo "$ENTRY_JSON" | jq -r '.scripts  // [] | .[]')

          echo "▶ repo      = $repo"
          echo "▶ branch    = ${branch:-<default>}"
          echo "▶ destDir   = $destDir"
          echo "▶ truncDir  = ${truncDir:-<root>}"
          echo "▶ checkout  = ${checkoutArr[*]}"
          echo "▶ scripts   = ${scriptsArr[*]}"

          #-------------------------------------------------------------------
          # 1. Resolve default branch if omitted
          #-------------------------------------------------------------------
          repoUrl="https://${GH_HOST}/${repo}.git"
          if [[ -z "$branch" ]]; then
            branch=$(git ls-remote --symref "$repoUrl" HEAD \
                     | awk '/^ref:/ {sub("refs/heads/", "", $2); print $2}')
            echo "Using default branch: $branch"
          fi

          #-------------------------------------------------------------------
          # 2. Sparse clone (non-cone, depth-1, no checkout)
          #-------------------------------------------------------------------
          cloneDir=$(mktemp -d)
          git clone --filter=blob:none --no-checkout --depth 1 \
                    --branch "$branch" "$repoUrl" "$cloneDir"

          git -C "$cloneDir" sparse-checkout init --no-cone
          if [[ ${#checkoutArr[@]} -gt 0 ]]; then
            echo "▶ setting sparse checkout: ${checkoutArr[*]}"
            git -C "$cloneDir" sparse-checkout set --no-cone "${checkoutArr[@]}"
          else
            echo "▶ disabling sparse checkout, because no `checkout` keyvalue was provided"
            git -C "$cloneDir" sparse-checkout disable   # full tree
          fi
          git -C "$cloneDir" checkout

          #-------------------------------------------------------------------
          # 3. Run scripts, if any
          #-------------------------------------------------------------------
          if [[ ${#scriptsArr[@]} -gt 0 ]]; then
            pushd "$cloneDir" >/dev/null
            # print the current directory
            echo "▶ current directory: $(pwd)"
            savedir=$(pwd)
            # print the contents of the current directory
            ls -la
            cd ..
            ls -la
            cd "$savedir"
            for cmd in "${scriptsArr[@]}"; do
              echo "▶ running: $cmd"
              # Export cloneDir so the Node.js script can see it
              CLONE_DIR="$cloneDir" bash -c "$cmd"
            done
            popd >/dev/null
          fi

          #-------------------------------------------------------------------
          # 4. Determine rsync source
          #-------------------------------------------------------------------
          if [[ -z "$truncDir" || "$truncDir" == "." ]]; then
            copySrc="$cloneDir"
          else
            copySrc="$cloneDir/$truncDir"
          fi

          if [[ ! -d "$copySrc" ]]; then
            echo "::error:: truncDir '${truncDir:-<root>}' not found after scripts"
            exit 1
          fi

          #-------------------------------------------------------------------
          # 5. Rsync into destination
          #-------------------------------------------------------------------
          mkdir -p "$destDir"
          rsyncFlags="-a --exclude=.git"
          if [[ -n "$(ls -A "$destDir" 2>/dev/null)" ]]; then
            rsyncFlags+=" --delete"
          fi
          rsync $rsyncFlags "$copySrc/" "$destDir/"

          #-------------------------------------------------------------------
          # 6. Clean up
          #-------------------------------------------------------------------
          rm -rf "$cloneDir"

      #-----------------------------------------------------------------------
      # 7. Stage changes and save as patch artifact
      #-----------------------------------------------------------------------
      - name: Create patch
        run: |
          destDir=${{ matrix.destDir }}
          git add -A "$destDir"
          if ! git diff --cached --quiet; then
            safeName=$(echo "$destDir" | tr '/[:upper:]' '-[:lower:]')
            git diff --cached --patch --binary > "${safeName}.patch"
            tar -czf "patch-${{ strategy.job-index }}.tar.gz" "${safeName}.patch"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: patches-${{ strategy.job-index }}
          path: patch-*.tar.gz
          if-no-files-found: ignore

##############################################################################
# 3. Aggregate patches into one commit
##############################################################################
  commit-changes:
    needs: sync
    runs-on: ubuntu-latest
    if: success()
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          pattern: patches-*
          path: patches
          merge-multiple: true
        continue-on-error: true

      - name: Apply patches
        run: |
          workdir=$(mktemp -d)
          shopt -s nullglob
          for tgz in patches/*.tar.gz; do
            tar -xzf "$tgz" -C "$workdir"
          done
          shopt -u nullglob

          if ls "$workdir"/*.patch >/dev/null 2>&1; then
            git apply --3way --ignore-space-change --whitespace=nowarn "$workdir"/*.patch
          fi
          rm -rf "$workdir"

      - name: Commit & push
        run: |
          git add -A
          if ! git diff --staged --quiet; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: auto-sync external sources"
            git push
          else
            echo "No changes to commit."
          fi
